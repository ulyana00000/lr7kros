import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { IonicModule } from '@ionic/angular';
import { InstrumentService } from '../../services/instrument.service';
import { IInstrument } from '../../models/IInstrument';
import { NgFor } from '@angular/common';
import { IRentable } from '../../models/IRentable';
import { InstrumentFactory } from '../../factory/InstrumentFactory';
import { RouterModule } from '@angular/router';
import { InstrumentFormComponent } from '../instrument-form/instrument-form.component';
import { InstrumentEditComponent } from '../instrument-edit/instrument-edit.component';
import { CategoryFilterService } from '../../services/category-filter.service';
import { Observable } from 'rxjs';

@Component({
  standalone: true,
  selector: 'app-instrument-list',
  templateUrl: './instrument-list.component.html',
  styleUrls: ['./instrument-list.component.scss'], // ‚Üê –ú–ê–Ñ –ë–£–¢–ò
  imports: [IonicModule, CommonModule, NgFor,InstrumentFormComponent, RouterModule, InstrumentEditComponent],
})

export class InstrumentListComponent implements OnInit {
  instruments: IInstrument[] = [];
showEditor = false;
filteredInstruments$: Observable<IInstrument[]>;
  toastOpen = false;
  toastMessage = '';

  constructor(
    private service: InstrumentService,
    private categoryFilterService: CategoryFilterService
  ) {
    this.filteredInstruments$ = this.categoryFilterService.getFilteredInstruments();
  }

  ngOnInit() {
    this.service.getInstruments().subscribe((data) => {
      this.instruments = data;
    });
  }
  onRentToggle(value: boolean) {
  this.categoryFilterService.setRentOnly(value);
}
private normalizeType(type: string): string {
  const map: Record<string, string> = {
    '–ì—ñ—Ç–∞—Ä–∞': 'guitar',
    '–≥—ñ—Ç–∞—Ä–∞': 'guitar',
    '–ü—ñ–∞–Ω—ñ–Ω–æ': 'piano',
    '–ø—ñ–∞–Ω—ñ–Ω–æ': 'piano',
    '–ë–∞—Ä–∞–±–∞–Ω–∏': 'drums',
    '–±–∞—Ä–∞–±–∞–Ω–∏': 'drums'
  };

  return map[type.trim()] || type.toLowerCase();
}


 


  onCategoryChange(type: string) {
    this.categoryFilterService.setCategory(type);
  }

addInstrumentToList(data: any) {
  const instrument = InstrumentFactory.create(data);
  this.instruments.push(instrument);

 const mapType: Record<string, string> = {
  '–ì—ñ—Ç–∞—Ä–∞': 'guitar',
  '–ü—ñ–∞–Ω—ñ–Ω–æ': 'piano',
  '–ë–∞—Ä–∞–±–∞–Ω–∏': 'drums'
};


  const rawData = this.instruments.map(i => ({
  name: i.getName(),
  price: i.getPrice(),
  type: this.normalizeType(i.getType()),
  ...this.extractDetails(i)
}));


  this.service.saveInstruments(rawData).subscribe({
    next: () => console.log('‚úÖ –î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ'),
    error: (err) => console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ:', err)
  });
}

extractDetails(instr: any): any {
  if (instr.getType() === '–ì—ñ—Ç–∞—Ä–∞') {
    return {
      guitarType: instr.guitarType || '–ê–∫—É—Å—Ç–∏—á–Ω–∞',
      strings: instr.strings || 6,
      rentPricePerDay: instr.rentPricePerDay
    };
  }

  if (instr.getType() === '–ü—ñ–∞–Ω—ñ–Ω–æ' || this.normalizeType(instr.getType()) === 'piano') {
  return {
    keys: instr.keys ?? 88,
    mechanism: instr.mechanism ?? '–ö–ª–∞—Å–∏—á–Ω–∞',
    rentPricePerDay: instr.rentPricePerDay ?? null
  };
}


  if (instr.getType() === '–ë–∞—Ä–∞–±–∞–Ω–∏') {
    return {
      pieces: instr.pieces || 5,
      hasPedal: instr.hasPedal || false,
      rentPricePerDay: instr.rentPricePerDay
    };
  }

  return {};
}

onInstrumentUpdated(event: { index: number; data: any }) {
  const { index, data } = event;

  // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —ñ–∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
  const updated = InstrumentFactory.create(data);

  // –ó–∞–º—ñ–Ω—é—î–º–æ –≤ –º–∞—Å–∏–≤—ñ
  this.instruments[index] = updated;

  // –§–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
  const rawData = this.instruments.map(i => {
    const mapType: Record<string, string> = {
      '–ì—ñ—Ç–∞—Ä–∞': 'guitar',
      '–ü—ñ–∞–Ω—ñ–Ω–æ': 'piano',
      '–ë–∞—Ä–∞–±–∞–Ω–∏': 'drums'
    };

    return {
      name: i.getName(),
      price: i.getPrice(),
      type: mapType[i.getType()] || i.getType().toLowerCase(),
      ...this.extractDetails(i)
    };
  });

  this.service.saveInstruments(rawData).subscribe({
    next: () => console.log('‚úÖ –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ'),
    error: (err) => console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', err)
  });
}



  isRentable(instr: any): instr is IRentable {
    return typeof instr.rent === 'function';
  }

  buy(instr: IInstrument) {
    this.toastMessage = `‚úÖ –í–∏ –∫—É–ø–∏–ª–∏ ${instr.getName()} –∑–∞ ${instr.getPrice()} –≥—Ä–Ω`;
    this.toastOpen = true;
  }

  rent(instr: IInstrument) {
    if (this.isRentable(instr)) {
      const days = 3;
      const cost = instr.rent(days);
      this.toastMessage = `üí∞ –û—Ä–µ–Ω–¥–∞ ${instr.getName()} –Ω–∞ ${days} –¥–Ω—ñ–≤ = ${cost} –≥—Ä–Ω`;
      this.toastOpen = true;
    }
  }
}
